service: thugger-lyrics

plugins:
  - serverless-s3-sync
  - serverless-cloudfront-invalidate # add as the last plugin

custom:
  bucketName: ${self:service}-${self:provider.stage}
  domainName: thuggerlyrics.com
  hostedZoneId: Z08680303K4CJNFJ4JZAV
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: dist/thugger-lyrics
  cloudfrontInvalidate:
    - distributionIdKey: DistributionId
      autoInvalidate: true
      items:
        - '/*'

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 128
  stage: ${opt:stage, 'develop'}
  region: us-east-1

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicyPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref Bucket
        PolicyDocument:
          Id: BucketPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: AllowCloudFrontServicePrincipalReadOnly
              Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: s3:GetObject
              Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket, /*]]
    OriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig: 
          Name: ${self:service}-${self:provider.stage}-oac
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
    Distribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.bucketName}.s3.amazonaws.com # CF Distribution domain must be the same as the S3 bucket URL
              ID: S3-${self:custom.bucketName}
              OriginAccessControlId: !Ref OriginAccessControl
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: S3-${self:custom.bucketName}
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: !Ref Certificate
            MinimumProtocolVersion: TLSv1.2_2021
            SslSupportMethod: sni-only
          Aliases:
            - ${self:custom.domainName}
    Certificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.domainName}
        DomainValidationOptions:
          - DomainName: ${self:custom.domainName}
            HostedZoneId: ${self:custom.hostedZoneId}
        ValidationMethod: DNS
    RecordSetGroup:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.hostedZoneId}
        RecordSets:
          - Name: ${self:custom.domainName}
            Type: A
            AliasTarget:
              HostedZoneId: ${self:custom.hostedZoneId}
              DNSName: !GetAtt Distribution.DomainName
          - Name: ${self:custom.domainName}
            Type: AAAA
            AliasTarget:
              HostedZoneId: ${self:custom.hostedZoneId}
              DNSName: !GetAtt Distribution.DomainName
  Outputs:
    DistributionId:
      Value: !Ref Distribution
    DistributionDomainName:
      Value: !Ref Distribution.DomainName
